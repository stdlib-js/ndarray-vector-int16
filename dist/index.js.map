{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( '@stdlib/ndarray-vector-ctor' ).factory;\n\n\n// MAIN //\n\n/**\n* Returns a signed 16-bit integer vector (i.e., a one-dimensional ndarray).\n*\n* @name Int16Vector\n* @type {Function}\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only vector\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed vector dimensions\n* @param {string} [options.order='row-major'] - memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be either a length, typed array, array-like object, buffer, iterable, or options object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n*\n* var arr = new Int16Vector();\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 0\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n*\n* var arr = new Int16Vector( 2 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n*\n* var arr = new Int16Vector( [ 1, 2 ] );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Int16Vector( buf );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 16\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Int16Vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 8\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = new Int16Vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*/\nvar Int16Vector = factory( 'int16' );\n\n\n// EXPORTS //\n\nmodule.exports = Int16Vector;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a signed 16-bit integer vector (i.e., a one-dimensional ndarray).\n*\n* @module @stdlib/ndarray-vector-int16\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n* var Int16Vector = require( '@stdlib/ndarray-vector-int16' );\n*\n* var v = new Int16Vector();\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 0\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n* var Int16Vector = require( '@stdlib/ndarray-vector-int16' );\n*\n* var v = new Int16Vector( 2 );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* @example\n* var numel = require( '@stdlib/ndarray-numel' );\n* var Int16Vector = require( '@stdlib/ndarray-vector-int16' );\n*\n* var v = new Int16Vector( [ 1, 2 ] );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var numel = require( '@stdlib/ndarray-numel' );\n* var Int16Vector = require( '@stdlib/ndarray-vector-int16' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Int16Vector( buf );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 16\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var numel = require( '@stdlib/ndarray-numel' );\n* var Int16Vector = require( '@stdlib/ndarray-vector-int16' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var v = new Int16Vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 8\n*\n* @example\n* var ArrayBuffer = require( '@stdlib/array-buffer' );\n* var numel = require( '@stdlib/ndarray-numel' );\n* var Int16Vector = require( '@stdlib/ndarray-vector-int16' );\n*\n* var buf = new ArrayBuffer( 64 );\n* var v = new Int16Vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = numel( v );\n* // returns 2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,6BAA8B,EAAE,QAiFnDC,EAAcD,EAAS,OAAQ,EAKnCD,EAAO,QAAUE,ICdjB,IAAIC,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "factory", "Int16Vector", "main"]
}
